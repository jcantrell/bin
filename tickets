#!/bin/bash
#'ticket_path='/cygdrive/c/apocrypha/home/jordan/.tickets/'
#ticket_path='/home/jordan/.tickets/'
#ticket_path='/home/jordan/.tickets/'
source ~/.bashrc
ticket_path=~/.tickets/

list()
{
	# Wrap each argument in double quotes, 
	# and precede it with '-e ' (except '-v')

	[[ $# == 0 ]] && args="\"\"" || args=""
	for var in "$@" ; do
	    [[ "$var" != "-v" ]] && args=$args" -e";
	    args=$args" \"$var\"";
	done

	# Grep for given arguments in openlist, sort by ticket number

	eval "grep $args ${ticket_path}data/openlist" \
		| sort -V
}

view()
{
	if (($# ==  0)); then
		echo "Usage: tickets view n1 n2 n3 ..."
	else
		[[ -e "$ticket_path"data/open/"$1" ]] && \
      cat "$ticket_path"data/open/"$1" || \
      cat "$ticket_path"data/closed"/$1"
	fi
}

edit()
{
	if (( $#!=0 )); then
    ed "$ticket_path"data/open/"$1" \

  	# Update entry in openlist
  
  	#Remove old entry
  	sed "/^$1/d" -i ${ticket_path}data/openlist
  	
  	#Get new title of task
  	var=$(sed -n '/^title: /p' ${ticket_path}data/open/$1)
  
  	#Add new title to openlist
  	echo $1" "$var >> ${ticket_path}data/openlist
  else
	  echo "Usage: tickets edit n"
  fi
}

new()
{
	if (( $# != 0)); then
		title=$1;
	else
		title="?";
	fi

  cf=${ticket_path}data/current

  if [ -f ${cf} ]; then
		c=$(( $(cat ${cf}) + 1))
	else
		c=1
	fi
  echo ${c} > ${cf}
	f=${ticket_path}data/open/${c}
  touch ${ticket_path}${c}

	echo -n "ticket: " >> ${f}
	echo ${c} >> ${f}
	echo -n "responsible: " >> ${f}
	echo ${USER}"@"$(hostname) >> ${f}
	echo "status: open" >> ${f}
  echo "priority: 0" >> ${f}
	echo "title: $title" >> ${f}
	echo -n "open date: " >> ${f}
	date >> ${f}
	echo "close date: " >> ${f}
  echo -n "scheduled: " >> ${f}
  date +" %M %H %d %m %w %Y" >> ${f}
	echo "man hours: " >> ${f}
	echo "----" >> ${f}
	echo "Describe the problem here" >> ${f}

	# Add an entry to openlist
	echo ${c}" title: $title" >> ${ticket_path}data/openlist

	echo ${c}
	chmod 777 $f
}

recurring()
{
  action="$1"
  shift

	case "$action" in
  add)
    crondate="$1"
    title="$2"
    cf=${ticket_path}data/recurring/current
    c=0
    [[ -f ${cf} ]] && c=$(( $(cat ${cf}) + 1))
    echo ${c} > ${cf}
    f=${ticket_path}data/recurring/${c}
    echo "title: $title" >> ${f}
    echo "crondate: $crondate" >> ${f}
    chmod 777 $f
    tickets recurring reset
    echo ${c}
    ;;
  reset)
    for f in ${ticket_path}data/recurring/*; do
      [ -e "$f" ] || continue;
      [ ! "$f" == "${ticket_path}recurring/current" ] || continue;
      t=$(grep 'title: ' "$f" | sed 's/title: //')
      cd=$(grep 'crondate: ' "$f" | sed 's/crondate: //')


      croncommand="$cd /bin/bash -ci 'source "
      croncommand="$croncommand""\$HOME/.bashrc;"
      croncommand="$croncommand""tickets recurring activate ${f##*/}'"
      (crontab -l; echo "$croncommand") \
        2>/dev/null | uniq | crontab -
    done
    ;;
  remove)
    crontab -l | grep -v "tickets recurring activate $1" | crontab -
    rm ${ticket_path}data/recurring/$1
    ;;
  view)
    cat ${ticket_path}data/recurring/$1
    ;;
  list)
    #(for f in ${ticket_path}recurring/*; do
    #  [ -e "$f" ] || continue;
    #  [ ! "$f" == "${ticket_path}recurring/current" ] || continue;
    #  crontab -l | grep "tickets recurring activate ${f##*/}" | uniq
    #done) | uniq
    ls -I current ${ticket_path}data/recurring | xargs head -n 2 \
      | sed '/^\s*$/d' \
      | sed 's/\(==> \)\|\( <==\)//g' \
      | sed 'N;N;s/\(.*\)\n\(.*\)\n\(.*\)/\1\
\3\
\2/' \
      | sed 'N;N;s/\n/ /g' \
      | sed 's/crondate: //'
    ;;
  activate)
    activateRecurring "$1"
    tickets sync
    exit
    ;;
  *)
    echo -n "Usage: tickets recurring {add crondate title |"
    echo -n "remove recurId | activate recurId | list | reset}"
    echo
    exit 1
    ;;
  esac
}

activateRecurring()
{
  title=$(grep title ${ticket_path}data/recurring/$1 | sed 's/title: //')
  n=$(tickets new "$title")
  s="Describe the problem here"
  sed '/'"$s"'/d' -i ${ticket_path}data/open/$n # delete line matching s
  cat "$ticket_path"data/recurring/$1 | sed '/title: /d' >> "${ticket_path}data/open$n"
}

# Create a new weekly task;
# Put date in title and add to weekly file
weekly()
{
    n=$(tickets new)
    sed "/title: /s/?/weekly tasks $(date +'%a, %b %d')/; /Describe the problem here/d" -i $ticket_path$n
    cat "$ticket_path"data/recurring/weekly >> $ticket_path$n
}

close()
{
	# To-do: what if ticket $n doesn't exist, or already closed?
	if (( $# != 0 )); then
		for ((n=1;n<=$#;n++))
		do
		  if [[ ! -e "${ticket_path}"data/open/"${!n}" ]]; then
        echo "Ticket ${!n} doesn't exist or is already closed!"
        continue
      fi
      
    	sed "/status: /s/open/closed/" -i ${ticket_path}data/open/${!n}
    	sed "/close date: /s/$/$(date)/" -i ${ticket_path}data/open/${!n}
			mv ${ticket_path}data/open/${!n} $ticket_path"data/closed"

			# Remove from openlist
			sed "/"${!n}"/d" -i ${ticket_path}data/openlist
		done
	else
		echo "Usage: tickets close n"
	fi
}

refresh()
{
	# move all status: closed tickets to .tickets/closed, 
	#	all else to .tickets
	# list all tickets not in .tickets/closed in openlist

	# Move unclosed tickets to .tickets
	grep -R -L 'status: closed' ${ticket_path}data/closed \
		| xargs -I{} mv {} ${ticket_path}data/open

	# Move closed tickets to closed
	grep --exclude-dir=closed -R -l 'status: closed' ${ticket_path} \
		| xargs -I{} mv {} ${ticket_path}data/closed
	
	# Create openlist
	grep --exclude-dir=closed --exclude-dir=.git --exclude=current \
		--exclude=openlist --exclude-dir=recurring -R -L 'status: closed' \
		${ticket_path} \
		| xargs grep '^title: ' \
		| awk -F "/" '{print $NF}' \
		| sort -V \
		| sed 's/:/ /' \
    | sed 's/ title: /: /' >${ticket_path}data/openlist

}

sync()
{
  pushd $ticket_path
  d=$(date +'%s')
  touch ${ticket_path}data/timestamp/"$d"
  find ${ticket_path}data/timestamp/ -type f -not -name "$d" -delete
  git add -A
  git commit -m "auto sync $(date)"
  git pull
  git push
  git pull
  popd
}

dup()
{
	if (($# ==  0)); then
		echo "Usage: tickets view n1 n2 n3 ..."
	else
    t="$1"
    n=$(tickets new)
    f=${ticket_path}data/open/${n}
    sed -i '1,/----/d' $f
    cat ${ticket_path}data/open/${t} >> $f
    sed -i '/ticket:/c\ticket: '$n $f
    sed -i '1d' $f
	fi
  refresh
}

sched()
{
  echo "Sched"

  pat="5,10 0 10 * 1"

	c=$(( $(cat ${ticket_path}data/timestamp) ))
  echo "Last: $c"
  echo -n "Now:  "
  date +'%s' # >${ticket_path}timestamp
}

main()
{
  action="$1"
  shift
#  sched
	case "$action" in
	  list)
	    list "$@"
	    ;;
    view)
      view "$@"
      ;;
    edit)
      edit "$@"
      ;;
    new)
      new "$@"
      ;;
    weekly)
      weekly "$@"
      ;;
    close)
      close "$@"
      ;;
    refresh)
      refresh "$@"
      ;;
    sync)
      sync "$@"
      exit
      ;;
    dup)
      dup "$@"
      ;;
    recurring)
      recurring "$@"
      ;;
    *)
      echo -n "Usage: tickets {list RE|view n|edit n|new title|weekly"
      echo    "|close n|refresh|sync|dup n}"
      exit 1
	esac

  tickets sync >/dev/null 2>&1 &# push new timestamp
}

main "$@"
