#!/bin/bash
REMUSER=cantrel2
LOCUSER=`whoami`
REPONAME=seedarg

REMOTE="/home/$REMUSER/projects/llvm-project"
LOCAL="/home/$LOCUSER/projects/llvm-project"
REPOURL="https://github.com/clang-randstruct/llvm-project"
INSTANCE=""
GCPIP=""

installgcloud()
{
  cd ~
  wget "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-235.0.0-linux-x86_64.tar.gz"
  tar -xvf "google-cloud-sdk-235.0.0-linux-x86_64.tar.gz"
  ./google-cloud-sdk/install.sh
  ./google-cloud-sdk/bin/gcloud init
}

usage()
{
  echo -e "Usage: gcptool [ACTTION]"
  echo -e ""
  echo -e "  up      [instance]          start an instance"
  echo -e "  down    [instance]          stop an instance"
  echo -e "  ip      [instance]          get ip address of an instance"
  echo -e "  sync    [reponame]          copy executable and headers"
  echo -e "  build   [reponame] [cores]  build repo using # of cores"
  echo -e "  freshen [reponame] [cores]  clean build of repo, using # of cores"
  echo -e "  run     command             run command on vm"
  echo -e "  connect                     ssh into vm"
}

inst()
{
  echo `gcloud compute instances list | tail -n 1 | awk '{ print $1 }'`
}

up()
{
	[[ $1 ]] && INSTANCE="$1" || INSTANCE=$(inst)
  gcloud compute instances start "$INSTANCE"
}

down()
{
  [[ $1 ]] && INSTANCE="$1" || INSTANCE=$(inst)
  gcloud compute instances stop "$INSTANCE"
}

ip()
{
  LINE=`gcloud compute instances list | tail -n 1`
  EXTIP=`echo $LINE | awk '{ print $9 }'`
  STATUS=`echo $LINE | awk '{ print $10 }'`

  # If STATUS is empty, the external ip column is blank (instance isn't on)
  # so return "", otherwise return the IP address
  [[ -z "$STATUS" ]] && GCPIP="" || GCPIP="$EXTIP"
  echo -n "$GCPIP"
}

sync()
{
  up
  ip >/dev/null
  [[ $1 ]] && REPONAME="$1"

	REMOTEBIN="$REMOTE/$REPONAME/build/bin/clang"
	LOCALBIN="$LOCAL/$REPONAME/build/bin/clang"
	REMOTEINC="$REMOTE/$REPONAME/build/lib/clang/9.0.0/include"
	LOCALINC="$LOCAL/$REPONAME/build/lib/clang/9.0.0"
  SSHSTR="ssh -l $REMUSER -o StrictHostKeyChecking=no"
  RSYNCOPTS=( -PLc -r --stats -e "${SSHSTR}" )
  echo 

  mkdir -p $(dirname "$LOCALBIN")
  mkdir -p "$LOCALINC"

  sleep 4
  # bash variable replacement shenanigans with RSYNCOPTS are due to the quotes
  # needed to pass the SSHSTR to rsync.
	rsync "${RSYNCOPTS[@]}" "$REMUSER"@"$GCPIP":"$REMOTEBIN" "$LOCALBIN"
	rsync "${RSYNCOPTS[@]}" "$REMUSER"@"$GCPIP":"$REMOTEINC" "$LOCALINC"
  down
}

new()
{
  up
  ip >/dev/null

	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2" || CORES=48

  CMAKEOPTS="-DLLVM_ENABLE_PROJECTS=clang -G \"Unix Makefiles\" ../llvm"

  CMDSTR=""
  CMDSTR="${CMDSTR}git clone $REPOURL $REMOTE/$REPONAME;"
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME;"
  CMDSTR="${CMDSTR}git fetch;"
  CMDSTR="${CMDSTR}git checkout -t remotes/origin/$REPONAME;"
  CMDSTR="${CMDSTR}mkdir -p $REMOTE/$REPONAME/build;"
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
	CMDSTR="${CMDSTR}pwd;"
  CMDSTR="${CMDSTR}git branch -vv;"
  CMDSTR="${CMDSTR}git pull;"
  CMDSTR="${CMDSTR}rm -rf *;"
  CMDSTR="${CMDSTR}cmake $CMAKEOPTS;"
  CMDSTR="${CMDSTR}make -j $CORES;"
	
  sleep 4
	ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP" "$CMDSTR"
  down
}

freshen()
{
  up
  ip >/dev/null

	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2" || CORES=48

  CMAKEOPTS="-DLLVM_ENABLE_PROJECTS=clang -G \"Unix Makefiles\" ../llvm"

  CMDSTR=""
  CMDSTR="${CMDSTR}mkdir -p $REMOTE/$REPONAME/build;"
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
	CMDSTR="${CMDSTR}pwd;"
  CMDSTR="${CMDSTR}git branch -vv;"
  CMDSTR="${CMDSTR}git pull;"
  CMDSTR="${CMDSTR}rm -rf *;"
  CMDSTR="${CMDSTR}cmake $CMAKEOPTS;"
  CMDSTR="${CMDSTR}make -j $CORES;"
	
  sleep 4
	ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP" "$CMDSTR"
  down
}

build()
{
  up
  ip >/dev/null

	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2" || CORES=48

  CMDSTR=""
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
	CMDSTR="${CMDSTR}pwd;"
  CMDSTR="${CMDSTR}git branch -vv;"
  CMDSTR="${CMDSTR}git pull;"
  CMDSTR="${CMDSTR}make -j $CORES;"
	
  sleep 3
	ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP" "$CMDSTR"
  down
}

run()
{
  up
  ip >/dev/null
  sleep 3
  ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP" "$*"
  down
}

connect()
{
  up
  ip >/dev/null
  #whoami
  #echo "remuser is $REMUSER"
  #echo "ip is $GCPIP"
  sleep 3 # connection fails if we try too soon
  ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP"
  down
}

bync()
{
  up
  ip >/dev/null

  #build

	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2" || CORES=48

  CMDSTR=""
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
	CMDSTR="${CMDSTR}pwd;"
  CMDSTR="${CMDSTR}git branch -vv;"
  CMDSTR="${CMDSTR}git pull;"
  CMDSTR="${CMDSTR}make -j"

	
  echo "Building"
  sleep 3
  #decrease # of cores until success or we just have impossibly
  #few cores
  #while [[ $retval != 0 && $CORES > 6 ]]
  #do
	  ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP" "$CMDSTR $CORES;"
    retval=$?
    echo "ssh retval is $retval"
    #CORES=$((CORES/2))
  #CMDSTR="cd $REMOTE/$REPONAME/build;make -j $((CORES/2))"
  #CMDSTR="cd $REMOTE/$REPONAME/build;make -j $((CORES/2))"
  #done

  # sync
  echo "Syncing"
	REMOTEBIN="$REMOTE/$REPONAME/build/bin/clang"
	LOCALBIN="$LOCAL/$REPONAME/build/bin/clang"
	REMOTEINC="$REMOTE/$REPONAME/build/lib/clang/9.0.0/include"
	LOCALINC="$LOCAL/$REPONAME/build/lib/clang/9.0.0"
  SSHSTR="ssh -l $REMUSER -o StrictHostKeyChecking=no"
  RSYNCOPTS=( -PLc -r --stats -e "${SSHSTR}" )
  echo 

  mkdir -p $(dirname "$LOCALBIN")
  mkdir -p "$LOCALINC"

  sleep 4
  # bash variable replacement shenanigans with RSYNCOPTS are due to the quotes
  # needed to pass the SSHSTR to rsync.
  echo "Syncing executable"
	rsync "${RSYNCOPTS[@]}" "$REMUSER"@"$GCPIP":"$REMOTEBIN" "$LOCALBIN"
  echo "Syncing headers"
	rsync "${RSYNCOPTS[@]}" "$REMUSER"@"$GCPIP":"$REMOTEINC" "$LOCALINC"

  down
}

main()
{
  action="$1"
  shift
  case "$action" in
  build) # build the repo
    build "$@"
    ;;
  sync) # sync built clang and includes
    sync "$@"
    ;;
  ip) # get ip (if running)
    ip "$@"
    ;;
  up) # bring up instance
    up "$@"
    ;;
  down) # bring down instance
    down "$@"
    ;;
  run) # run a command
    run "$@"
    ;;
  inst) # (first) instance name
    inst "$@"
    ;;
  connect) # connect for interactive session
    connect "$@"
    ;;
  freshen) # clear out build/ and rerun cmake
    freshen "$@"
    ;;
  installgcloud) # install gcloud (not tested)
    installgcloud "$@"
    ;;
  bync) # build and sync; don't bother taking the vm down in between
    bync "$@"
    ;;
  new)
    new "$@"
    ;;
  *)
    usage "$@"
    ;;
  esac
}


main "$@"
