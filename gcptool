#!/bin/bash
REMUSER=cantrel2
LOCUSER=`whoami`
REPONAME=seedarg
BRANCH="$REPONAME"
MODE="gcloud"

REMOTE="/home/$REMUSER/projects/llvm-project"
LOCAL="/home/$LOCUSER/projects/llvm-project"
REPOURL="https://github.com/clang-randstruct/llvm-project"
INSTANCE=""
GCPIP="10.0.0.216"

installgcloud()
{
  cd ~
  wget "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-235.0.0-linux-x86_64.tar.gz"
  tar -xvf "google-cloud-sdk-235.0.0-linux-x86_64.tar.gz"
  ./google-cloud-sdk/install.sh
  ./google-cloud-sdk/bin/gcloud init
  echo "Run 'source ~/.bashrc' or login again to use gcloud"
}

usage()
{
  echo -e "Usage: gcptool [ACTTION]"
  echo -e ""
  echo -e "  up      [instance]          start an instance"
  echo -e "  down    [instance]          stop an instance"
  echo -e "  ip                          get ip address of the default instance"
  echo -e "  inst                        get name of the default instance"
  echo -e "  sync    [reponame]          copy executable and headers"
  echo -e "  new     [reponame] [branch] make a new directory for a repo"
  echo -e "  build   [reponame] [cores]  build repo using # of cores"
  echo -e "  bync    [reponame] [cores]  build and sync a repo with # of cores"
  echo -e "  freshen [reponame] [cores]  clean build of repo, using # of cores"
  echo -e "  run     command             run command on vm"
  echo -e "  installgcloud               allegedly installes the gcloud tool"
  echo 
}

inst()
{
  echo `gcloud compute instances list | tail -n 1 | awk '{ print $1 }'`
}

up()
{
	[[ $1 ]] && INSTANCE="$1" || INSTANCE=$(inst)
  gcloud compute instances start "$INSTANCE"
  ip >/dev/null
}

down()
{
  [[ $1 ]] && INSTANCE="$1" || INSTANCE=$(inst)
  gcloud compute instances stop "$INSTANCE"
}

ip()
{
  LINE=`gcloud compute instances list | tail -n 1`
  EXTIP=`echo $LINE | awk '{ print $9 }'`
  STATUS=`echo $LINE | awk '{ print $10 }'`

  # If STATUS is empty, the external ip column is blank (instance isn't on)
  # so return "", otherwise return the IP address
  [[ -z "$STATUS" ]] && GCPIP="" || GCPIP="$EXTIP"
  echo -n "$GCPIP"
}

sync()
{
  [[ $1 ]] && REPONAME="$1"

	REMOTEBIN="$REMOTE/$REPONAME/build/bin/clang"
	LOCALBIN="$LOCAL/$REPONAME/build/bin/clang"
	REMOTEINC="$REMOTE/$REPONAME/build/lib/clang/9.0.0/include"
	LOCALINC="$LOCAL/$REPONAME/build/lib/clang/9.0.0"
  SSHSTR="ssh -l $REMUSER -o StrictHostKeyChecking=no"
  RSYNCOPTS=( -PLc -r --stats -e "${SSHSTR}" )
  echo 

  mkdir -p $(dirname "$LOCALBIN")
  mkdir -p "$LOCALINC"

  # bash variable replacement shenanigans with RSYNCOPTS are due to the quotes
  # needed to pass the SSHSTR to rsync.
  echo "Syncing executable"
	rsync "${RSYNCOPTS[@]}" "$REMUSER"@"$GCPIP":"$REMOTEBIN" "$LOCALBIN"
  echo "Syncing headers"
	rsync "${RSYNCOPTS[@]}" "$REMUSER"@"$GCPIP":"$REMOTEINC" "$LOCALINC"
}

new()
{
	[[ $1 ]] && REPONAME="$1"
  [[ $2 ]] && BRANCH="$2"

  CMDSTR=""
  CMDSTR="${CMDSTR}git clone $REPOURL $REMOTE/$REPONAME;"
  CMDSTR="${CMDSTR}mkdir -p $REMOTE/$REPONAME/build;"
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
	CMDSTR="${CMDSTR}pwd;"
  CMDSTR="${CMDSTR}git fetch;"
  CMDSTR="${CMDSTR}echo RUNNING NEW;"
  CMDSTR="${CMDSTR}git checkout -t remotes/origin/$BRANCH;"
  CMDSTR="${CMDSTR}echo git branch: ;"
  CMDSTR="${CMDSTR}git branch -vv;"
  CMDSTR="${CMDSTR}df -h;"


  #SSHOPTS="-o StrictHostKeyChecking=no"
	#ssh "$SSHOPTS" "$REMUSER"@"$GCPIP" "$CMDSTR"
  run "$CMDSTR"

  freshen "$REPONAME"
}

freshen()
{
	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2"

  CMAKEOPTS="-DLLVM_ENABLE_PROJECTS=clang -G \"Unix Makefiles\" ../llvm"

  CMDSTR=""
  CMDSTR="${CMDSTR}mkdir -p $REMOTE/$REPONAME/build;"
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
  CMDSTR="${CMDSTR}git pull;"
  CMDSTR="${CMDSTR}git reset --hard `git branch -vv | grep \* | awk '{ print $4 }' | sed 's/\[\|\]//g'`;"
  CMDSTR="${CMDSTR}rm -rf *;"
  CMDSTR="${CMDSTR}cmake $CMAKEOPTS;"
	
  run "$CMDSTR"
	#ssh -o StrictHostKeyChecking=no "$REMUSER"@"$GCPIP" "$CMDSTR"
  build "$REPONAME" "$CORES"
}

build()
{
	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2" || CORES=48

  CMDSTR=""
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
	CMDSTR="${CMDSTR}pwd;"
  CMDSTR="${CMDSTR}git branch -vv;"
  CMDSTR="${CMDSTR}git pull;"
  CMDSTR="${CMDSTR}make -j "

  SSHOPTS="-o StrictHostKeyChecking=no"

  #decrease # of cores until success or we just have impossibly
  #few cores
  # To-Do: only loop if make exited with error 4, out of memory
  retval=1;
  while [ $retval -ne 0 ] && [ $CORES -gt 6 ]
  do
    CMDSTR2="${CMDSTR} $CORES;"
    echo "Building with $CORES processors"
    echo "$CMDSTR2" | sed 's/;/;\n/g' >buildin
    run "$CMDSTR2"
    retval=$?
    echo "Make returned $retval"
    CORES=$((CORES/2))
  done
}

runtest()
{
	[[ $1 ]] && REPONAME="$1"

  CMDSTR=""
  CMDSTR="${CMDSTR}cd $REMOTE/$REPONAME/build;"
  CMDSTR="${CMDSTR}make clang-test;"
  CMDSTR="${CMDSTR}cd $REMOTE/testing/poc;"
  CMDSTR="${CMDSTR}make;"

  run "$CMDSTR"
}

run()
{
  ip >/dev/null
  if [[ -z "$GCPIP" ]]
  then
    echo "Instance not running"
  else
    SSHOPTS="-o StrictHostKeyChecking=no"
    SSHREDIRECTS="1> >(tee buildout) 2> >(tee builderr)"
    echo $* | sed 's/;/;\n/g' > gcptoolin
	  ssh "$SSHOPTS" "$REMUSER"@"$GCPIP" "$*" 1> >(tee gcptoolout) 2> >(tee gcptoolerr)
  fi
}

bync()
{
	[[ $1 ]] && REPONAME="$1"
	[[ $2 ]] && CORES="$2" 

  #build

  echo "Building"
	build "$REPONAME" "$CORES"

  # sync
  echo "Syncing"
  sync "$REPONAME"
}

main()
{
  action="$1"
  shift
  case "$action" in
  build) # build the repo
    up
    ip >/dev/null
    build "$@"
    down
    ;;
  sync) # sync built clang and includes
    up
    ip >/dev/null
    sync "$@"
    down
    ;;
  ip) # get ip (if running)
    ip "$@"
    ;;
  up) # bring up instance
    up "$@"
    ;;
  down) # bring down instance
    down "$@"
    ;;
  run) # run a command if up (or login, if no commands given)
    run "$@"
    ;;
  inst) # (first) instance name
    inst "$@"
    ;;
  freshen) # clear out build/ and rerun cmake
    up
    freshen "$@"
    down
    ;;
  installgcloud) # install gcloud (not tested)
    installgcloud "$@"
    ;;
  bync) # build and sync; don't bother taking the vm down in between
    up
    bync "$@"
    down
    ;;
  new) # create a new clone given a name and branch
    up
    new "$@"
    down
    ;;
  runtest) # runtest a repo
    up
    runtest "$@"
    down
    ;;
  *) # show how to use this dang thing
    usage "$@"
    ;;
  esac
}

main "$@"
